warn('[TEMPEST HUB] Loading Bypass')
wait(1)
warn('[TEMPEST HUB] Loading Ui')
wait(1)
local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    Title = 'Tempest Hub | Anime Champions Simulator',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})

Library:Notify('Loading Anime Champions Simulator', 5)

warn('[TEMPEST HUB] Loading Functions')
wait(1)


local function autospirit()
while getgenv().autospirit == true do
function GetCFrame(obj)
    local cframe = obj
    local objType = typeof(obj)
    if objType == "Vector3" then
        cframe = CFrame.new(obj)
    elseif objType == "table" then
        cframe = CFrame.new(unpack(obj))
    elseif objType == "string" then
        cframe = CFrame.new(unpack(obj:split(",")))
    elseif objType == "Instance" then
        if obj:IsA("Model") then
            cframe = obj:GetModelCFrame()
        elseif obj:IsA("Part") then
            cframe = obj.CFrame
        end
    end
    return cframe
end
wait()

local spirit = workspace.Effects.Spirit.HumanoidRootPart
local cframeDoPersonagem

if spirit then
    cframeDoPersonagem = GetCFrame(spirit)
end

if cframeDoPersonagem then
        game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(cframeDoPersonagem)
        wait()
        end
    end
end

local function autoraid()
    while getgenv().autoraid == true do
        local workspaceWorlds = workspace:FindFirstChild("Worlds")

        if workspaceWorlds then
            local hub = workspaceWorlds:FindFirstChild("Hub")
            local raids = workspaceWorlds:FindFirstChild("Raids")

            if raids then
                local function GetCFrameAbove(obj, height)
                    local cframe = nil
                    local objType = typeof(obj)

                    if objType == "Vector3" or objType == "table" or objType == "string" then
                        local position
                        if objType == "Vector3" then
                            position = obj
                        elseif objType == "table" then
                            position = Vector3.new(obj[1], obj[2], obj[3])
                        elseif objType == "string" then
                            local values = obj:split(",")
                            position = Vector3.new(tonumber(values[1]), tonumber(values[2]), tonumber(values[3]))
                        end
                        cframe = CFrame.new(position.x, position.y + height, position.z)
                    elseif objType == "Instance" then
                        if obj:IsA("Model") then
                            cframe = obj:GetPrimaryPartCFrame()
                        elseif obj:IsA("Part") then
                            cframe = obj.CFrame + Vector3.new(0, height, 0)
                        end
                    end
                    return cframe
                end

                local namekR = raids:FindFirstChild("Enemies")
                local cframeDoPersonagem

                if namekR then
                    local ginyu = namekR:FindFirstChild("Ginyu")
                    if ginyu then
                        -- If Ginyu is present, teleport above him with a height of 5 units
                        cframeDoPersonagem = GetCFrameAbove(ginyu.CFrame.p)
                    else
                        -- Teleport above the first enemy found in the workspace with a height of 30 units
                        for _, enemy in pairs(namekR:GetChildren()) do
                            if enemy:IsA("Model") then
                                cframeDoPersonagem = GetCFrameAbove(enemy:GetPrimaryPartCFrame().p, 30)
                                break -- Stop iterating after finding the first enemy
                            end
                        end
                    end
                end

                if cframeDoPersonagem then
                    game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(cframeDoPersonagem)
                    print("Successfully teleported!")
                else
                    print("No enemies found to teleport to.")
                end
            else
                print("workspace.Worlds.Raids does not exist")
            end
        else
            print("workspace.Worlds does not exist")
        end
        wait() -- Wait for a second before checking again (to avoid excessive loop execution)
    end
end


local function autocollectchest()
    while getgenv().autocollectchest == true do
        local enemiesFolder = workspace.Worlds.Raids:FindFirstChild("Enemies")
        
        if enemiesFolder == nil or #enemiesFolder:GetChildren() == 0 then
            game.Players.LocalPlayer.Character:MoveTo(Vector3.new(4016.09473, -149.956055, 5765.06982, 0, 0, 1, 0, 1, -0, -1, 0, 0))
            wait(1)
            game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.E, false, game)
            wait(2)
            local args = {
                [1] = "Hub"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Player"):WaitForChild("Teleport"):FireServer(unpack(args))
        else
            print("Há inimigos no mundo das Raids.")
        end
        wait(5) -- Espere 5 segundos antes da próxima verificação
    end
end

local function autocatch()
    while getgenv().autocatch == true do
        local args = {
            [1] = "TalentToken",
            [2] = 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Drops"):WaitForChild("Items"):FireServer(unpack(args))
        game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Drops"):WaitForChild("CaughtSpirit"):FireServer()        
        wait()
    end
end

function SetWalkSpeed(Value)
    local walkSpeed = Value
    
    local UIS = game:GetService("UserInputService")
    local RS = game:GetService("RunService")
    local W, A, S, D
    local xVelo, yVelo
    
    while true do
        wait()
        local HRP = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        local C = game.Workspace.CurrentCamera
        local LV = C.CFrame.LookVector

        for i, v in pairs(UIS:GetKeysPressed()) do
            if v.KeyCode == Enum.KeyCode.W then
                W = true
            end
            if v.KeyCode == Enum.KeyCode.A then
                A = true
            end
            if v.KeyCode == Enum.KeyCode.S then
                S = true
            end
            if v.KeyCode == Enum.KeyCode.D then
                D = true
            end
        end

        if W == true and S == true then
            yVelo = false
            W, S = nil, nil
        end

        if A == true and D == true then
            xVelo = false
            A, D = nil, nil
        end

        if yVelo ~= false then
            if W == true then
                if xVelo ~= false then
                    if A == true then
                        local LeftLV = (C.CFrame * CFrame.Angles(0, math.rad(45), 0)).LookVector
                        HRP.Velocity = Vector3.new((LeftLV.X * walkSpeed), HRP.Velocity.Y, (LeftLV.Z * walkSpeed))
                        W, A = nil, nil
                    else
                        if D == true then
                            local RightLV = (C.CFrame * CFrame.Angles(0, math.rad(-45), 0)).LookVector
                            HRP.Velocity = Vector3.new((RightLV.X * walkSpeed), HRP.Velocity.Y, (RightLV.Z * walkSpeed))
                            W, D = nil, nil
                        end
                    end
                end
            else
                if S == true then
                    if xVelo ~= false then
                        if A == true then
                            local LeftLV = (C.CFrame * CFrame.Angles(0, math.rad(135), 0)).LookVector
                            HRP.Velocity = Vector3.new((LeftLV.X * walkSpeed), HRP.Velocity.Y, (LeftLV.Z * walkSpeed))
                            S, A = nil, nil
                        else
                            if D == true then
                                local RightLV = (C.CFrame * CFrame.Angles(0, math.rad(-135), 0)).LookVector
                                HRP.Velocity = Vector3.new((RightLV.X * walkSpeed), HRP.Velocity.Y, (RightLV.Z * walkSpeed))
                                S, D = nil, nil
                            end
                        end
                    end
                end
            end
        end

        if W == true then
            HRP.Velocity = Vector3.new((LV.X * walkSpeed), HRP.Velocity.Y, (LV.Z * walkSpeed))
        end
        if S == true then
            HRP.Velocity = Vector3.new(-(LV.X * walkSpeed), HRP.Velocity.Y, -(LV.Z * walkSpeed))
        end
        if A == true then
            local LeftLV = (C.CFrame * CFrame.Angles(0, math.rad(90), 0)).LookVector
            HRP.Velocity = Vector3.new((LeftLV.X * walkSpeed), HRP.Velocity.Y, (LeftLV.Z * walkSpeed))
        end
        if D == true then
            local RightLV = (C.CFrame * CFrame.Angles(0, math.rad(-90), 0)).LookVector
            HRP.Velocity = Vector3.new((RightLV.X * walkSpeed), HRP.Velocity.Y, (RightLV.Z * walkSpeed))
        end

        xVelo, yVelo, W, A, S, D = nil, nil, nil, nil, nil, nil
        wait()
    end
end

function tptohub()
    local args = {
        [1] = "Hub"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Player"):WaitForChild("Teleport"):FireServer(unpack(args))
end    

function tptodbz()
    local args = {
        [1] = "DBZ"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Player"):WaitForChild("Teleport"):FireServer(unpack(args))  
end

function tptoop()
    local args = {
        [1] = "OnePiece"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Player"):WaitForChild("Teleport"):FireServer(unpack(args))
end

function tptomha()
    local args = {
        [1] = "MHA"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Player"):WaitForChild("Teleport"):FireServer(unpack(args))
end    

function tptonaruto()
    local args = {
        [1] = "Naruto"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Player"):WaitForChild("Teleport"):FireServer(unpack(args))  
end

function tptojojo()
    local args = {
        [1] = "Jojo"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Player"):WaitForChild("Teleport"):FireServer(unpack(args))  
end

function tptodemon()
    local args = {
        [1] = "DemonSlayer"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Player"):WaitForChild("Teleport"):FireServer(unpack(args))
end    

function tptoraid()
    local args = {
        [1] = "Hub"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Player"):WaitForChild("Teleport"):FireServer(unpack(args))
    wait(1)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-2105.59375, 133.411728, -3081.61133, -0.99997282, 6.93363376e-08, 0.00737391552, 6.94921454e-08, 1, 2.08729301e-08, -0.00737391552, 2.13847908e-08, -0.99997282)
end

function tptorerolls()
    local args = {
        [1] = "Hub"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Player"):WaitForChild("Teleport"):FireServer(unpack(args))
    wait(1)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1868.07593, 155.563263, -3297.20972, 0.130560055, -5.75710608e-08, -0.991440415, 4.34134364e-08, 1, -5.23511048e-08, 0.991440415, -3.62068739e-08, 0.130560055)
end

function tptotower()
    local args = {
        [1] = "Hub"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Player"):WaitForChild("Teleport"):FireServer(unpack(args))
    wait(1)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-2105.23315, 140.843796, -3602.97437, 0.999842823, -3.23348743e-08, 0.0177296139, 3.23651044e-08, 1, -1.41822454e-09, -0.0177296139, 1.99182248e-09, 0.999842823)
end

function tptomachine()
    local args = {
        [1] = "Hub"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Player"):WaitForChild("Teleport"):FireServer(unpack(args))
    wait(1)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1931.01208, 131.341568, -3130.26685, -0.66237855, -3.3508865e-08, -0.74916929, -6.27841672e-08, 1, 1.07826379e-08, 0.74916929, 5.41781553e-08, -0.66237855)
end

function tptocosmic()
    local args = {
        [1] = "Hub"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Player"):WaitForChild("Teleport"):FireServer(unpack(args))
    wait(1)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1925.22595, 131.291443, -3486.85522, 0.684826851, 2.0186441e-08, -0.728705823, -6.4478316e-09, 1, 2.16421938e-08, 0.728705823, -1.01225828e-08, 0.684826851)
end

function narutoroll()
    while getgenv().narutoroll == true do
        -- Obtém a instância 'Jojo' de ReplicatedStorage.UnloadedWorlds
        local NarutoWorld = game:GetService("ReplicatedStorage").UnloadedWorlds:FindFirstChild("Naruto")
        wait()

        if NarutoWorld then
            -- Move a instância 'Jojo' para o workspace.Worlds se ela existir
            wait()
            NarutoWorld.Parent = workspace.Worlds
        else
            wait()
            warn("A instância 'Jojo' não foi encontrada em ReplicatedStorage.UnloadedWorlds.")
        end

        -- Verifica se a instância 'BizarreOrb' existe em workspace.Worlds.Jojo
        local NarutoOrb = workspace:WaitForChild("Worlds"):WaitForChild("Naruto"):FindFirstChild("NarutoOrb")
        wait()

        if NarutoOrb then
            -- Cria um array de argumentos para a função FireServer
            local args = {
                [1] = NarutoOrb,
                [2] = 3
            }

            -- Chama a função FireServer no objeto Remote.Orbs.OpenOrbs de ReplicatedStorage
            game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Orbs"):WaitForChild("OpenOrbs"):FireServer(unpack(args))
            wait()
        else
            warn("A instância 'BizarreOrb' não foi encontrada em workspace.Worlds.Jojo.")
        end
    end
end

function mharoll()
    while getgenv().mharoll == true do
        -- Obtém a instância 'Jojo' de ReplicatedStorage.UnloadedWorlds
        local MHAWorld = game:GetService("ReplicatedStorage").UnloadedWorlds:FindFirstChild("MHA")
        wait()

        if MHAWorld then
            -- Move a instância 'Jojo' para o workspace.Worlds se ela existir
            MHAWorld.Parent = workspace.Worlds
            wait()
        else
            wait()
            warn("A instância 'Jojo' não foi encontrada em ReplicatedStorage.UnloadedWorlds.")
        end

        -- Verifica se a instância 'BizarreOrb' existe em workspace.Worlds.Jojo
        local MHAOrb = workspace:WaitForChild("Worlds"):WaitForChild("MHA"):FindFirstChild("MHAOrb")
        wait()

        if MHAOrb then
            -- Cria um array de argumentos para a função FireServer
            local args = {
                [1] = MHAOrb,
                [2] = 3
            }

            -- Chama a função FireServer no objeto Remote.Orbs.OpenOrbs de ReplicatedStorage
            game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Orbs"):WaitForChild("OpenOrbs"):FireServer(unpack(args))
            wait()
        else
            wait()
            warn("A instância 'BizarreOrb' não foi encontrada em workspace.Worlds.Jojo.")
        end
    end
end

function OProll()
    while getgenv().OProll == true do
        -- Obtém a instância 'Jojo' de ReplicatedStorage.UnloadedWorlds
        local OPWorld = game:GetService("ReplicatedStorage").UnloadedWorlds:FindFirstChild("OnePiece")
        wait()

        if OPWorld then
            wait()
            -- Move a instância 'Jojo' para o workspace.Worlds se ela existir
            OPWorld.Parent = workspace.Worlds
        else
            wait()
            warn("A instância 'Jojo' não foi encontrada em ReplicatedStorage.UnloadedWorlds.")
        end

        -- Verifica se a instância 'BizarreOrb' existe em workspace.Worlds.Jojo
        local OnePieceOrb = workspace:WaitForChild("Worlds"):WaitForChild("OnePiece"):FindFirstChild("OnePieceOrb")
        wait()

        if OnePieceOrb then
            -- Cria um array de argumentos para a função FireServer
            local args = {
                [1] = OnePieceOrb,
                [2] = 3
            }

            -- Chama a função FireServer no objeto Remote.Orbs.OpenOrbs de ReplicatedStorage
            game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Orbs"):WaitForChild("OpenOrbs"):FireServer(unpack(args))
            wait()
        else
            warn("A instância 'BizarreOrb' não foi encontrada em workspace.Worlds.Jojo.")
        end
    end
end

function DBZroll()
    while getgenv().DBZroll == true do
        -- Obtém a instância 'Jojo' de ReplicatedStorage.UnloadedWorlds
        local DBZWorld = game:GetService("ReplicatedStorage").UnloadedWorlds:FindFirstChild("DBZ")
        wait()

        if DBZWorld then
            wait()
            -- Move a instância 'Jojo' para o workspace.Worlds se ela existir
            DBZWorld.Parent = workspace.Worlds
        else
            wait()
            warn("A instância 'Jojo' não foi encontrada em ReplicatedStorage.UnloadedWorlds.")
        end

        -- Verifica se a instância 'BizarreOrb' existe em workspace.Worlds.Jojo
        local DBZOrb = workspace:WaitForChild("Worlds"):WaitForChild("DBZ"):FindFirstChild("DBZOrb")

        if DBZOrb then
            -- Cria um array de argumentos para a função FireServer
            local args = {
                [1] = DBZOrb,
                [2] = 3
            }

            -- Chama a função FireServer no objeto Remote.Orbs.OpenOrbs de ReplicatedStorage
            game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Orbs"):WaitForChild("OpenOrbs"):FireServer(unpack(args))
            wait()
        else
            warn("A instância 'BizarreOrb' não foi encontrada em workspace.Worlds.Jojo.")
        end
    end
end

function Jojoroll()
    while getgenv().Jojoroll == true do
        -- Obtém a instância 'Jojo' de ReplicatedStorage.UnloadedWorlds
        local jojoWorld = game:GetService("ReplicatedStorage").UnloadedWorlds:FindFirstChild("Jojo")
        wait()

        if jojoWorld then
            wait()
            -- Move a instância 'Jojo' para o workspace.Worlds se ela existir
            jojoWorld.Parent = workspace.Worlds
        else
            wait()
            warn("A instância 'Jojo' não foi encontrada em ReplicatedStorage.UnloadedWorlds.")
        end

        -- Verifica se a instância 'BizarreOrb' existe em workspace.Worlds.Jojo
        local bizarreOrb = workspace:WaitForChild("Worlds"):WaitForChild("Jojo"):FindFirstChild("BizarreOrb")

        if bizarreOrb then
            -- Cria um array de argumentos para a função FireServer
            local args = {
                [1] = bizarreOrb,
                [2] = 3
            }

            -- Chama a função FireServer no objeto Remote.Orbs.OpenOrbs de ReplicatedStorage
            game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Orbs"):WaitForChild("OpenOrbs"):FireServer(unpack(args))

            wait()
        else
            warn("A instância 'BizarreOrb' não foi encontrada em workspace.Worlds.Jojo.")
        end
    end
end

function Knyroll()
    while getgenv().Knyroll == true do
        -- Obtém a instância 'Jojo' de ReplicatedStorage.UnloadedWorlds
        local KnyWorld = game:GetService("ReplicatedStorage").UnloadedWorlds:FindFirstChild("DemonSlayer")
        wait()

        if KnyWorld then
            wait()
            -- Move a instância 'Jojo' para o workspace.Worlds se ela existir
            KnyWorld.Parent = workspace.Worlds
        else
            wait()
            warn("A instância 'Jojo' não foi encontrada em ReplicatedStorage.UnloadedWorlds.")
        end

        -- Verifica se a instância 'BizarreOrb' existe em workspace.Worlds.Jojo
        local DemonOrb = workspace:WaitForChild("Worlds"):WaitForChild("DemonSlayer"):FindFirstChild("DemonOrb")
        wait()

        if DemonOrb then
            -- Cria um array de argumentos para a função FireServer
            local args = {
                [1] = DemonOrb,
                [2] = 3
            }

            -- Chama a função FireServer no objeto Remote.Orbs.OpenOrbs de ReplicatedStorage
            game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Orbs"):WaitForChild("OpenOrbs"):FireServer(unpack(args))

            wait()
        else
            warn("A instância 'BizarreOrb' não foi encontrada em workspace.Worlds.Jojo.")
        end
    end
end

function jjkroll()
    while getgenv().jjkroll == true do
        -- Obtém a instância 'Jojo' de ReplicatedStorage.UnloadedWorlds
        local JJKWorld = game:GetService("ReplicatedStorage").UnloadedWorlds:FindFirstChild("JJK")
        wait()

        if JJKWorld then
            wait()
            -- Move a instância 'Jojo' para o workspace.Worlds se ela existir
            JJKWorld.Parent = workspace.Worlds
        else
            wait()
            warn("A instância 'Jojo' não foi encontrada em ReplicatedStorage.UnloadedWorlds.")
        end

        -- Verifica se a instância 'BizarreOrb' existe em workspace.Worlds.Jojo
        local JJKOrb = workspace:WaitForChild("Worlds"):WaitForChild("JJK"):FindFirstChild("JJKOrb")
        wait()

        if JJKOrb then
            -- Cria um array de argumentos para a função FireServer
            local args = {
                [1] = JJKOrb,
                [2] = 3
            }

            -- Chama a função FireServer no objeto Remote.Orbs.OpenOrbs de ReplicatedStorage
            game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Orbs"):WaitForChild("OpenOrbs"):FireServer(unpack(args))

            wait()
        else
            warn("A instância 'BizarreOrb' não foi encontrada em workspace.Worlds.Jojo.")
        end
    end
end


local selectionStory = nil
local selectionDifficulty = nil

-- Tabela de mapeamento para níveis de história
local storylevels = {
    ['DBZ RAID'] = 'DBZ',
    ['One Piece Raid'] = 'OnePiece',
    ['MHA Raid'] = 'MHA',
    ['Naruto Raid'] = 'Naruto',
    ['Jojo Raid'] = 'Jojo',
    ['Demon Slayer Raid'] = 'DemonSlayer',
    ['Jujutsu Raid'] = 'JJK'
}

-- Tabela de mapeamento para dificuldades
local difficulties = {
    ['Easy'] = 'Easy',
    ['Medium'] = 'Medium',
    ['Hard'] = 'Hard',
}

local selectionStory = nil
local selectionDifficulty = nil

-- Function to handle raids
local function handlestory(storyname, storylevel, difficulty)
    while getgenv()[storyname] == true do
        local args = {
            [1] = workspace:WaitForChild("Worlds"):WaitForChild("Hub"):WaitForChild("DungeonTemple"):WaitForChild("1"):WaitForChild("RaidRooms"):WaitForChild("Room4"),
            [2] = true
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Raid"):WaitForChild("SetInRaid"):FireServer(unpack(args))
        local args = {
            [1] = workspace:WaitForChild("Worlds"):WaitForChild("Hub"):WaitForChild("DungeonTemple"):WaitForChild("1"):WaitForChild("RaidRooms"):WaitForChild("Room4"),
            [2] = "HoverWorld",
            [3] = storylevel
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Raid"):WaitForChild("SetRaidSetting"):FireServer(unpack(args))
        local args = {
            [1] = workspace:WaitForChild("Worlds"):WaitForChild("Hub"):WaitForChild("DungeonTemple"):WaitForChild("1"):WaitForChild("RaidRooms"):WaitForChild("Room4"),
            [2] = "TargetWorld",
            [3] = storylevel
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Raid"):WaitForChild("SetRaidSetting"):FireServer(unpack(args))
        local args = {
            [1] = workspace:WaitForChild("Worlds"):WaitForChild("Hub"):WaitForChild("DungeonTemple"):WaitForChild("1"):WaitForChild("RaidRooms"):WaitForChild("Room4"),
            [2] = "Difficulty",
            [3] = difficulty
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Raid"):WaitForChild("SetRaidSetting"):FireServer(unpack(args))
        local args = {
            [1] = workspace:WaitForChild("Worlds"):WaitForChild("Hub"):WaitForChild("DungeonTemple"):WaitForChild("1"):WaitForChild("RaidRooms"):WaitForChild("Room4")
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Remote"):WaitForChild("Raid"):WaitForChild("StartRaid"):FireServer(unpack(args))

        if getgenv()["AutoEnterRaid"] == true then
            -- Teleport the player to a specific location (replace with your desired location)
            local teleportTarget = workspace:WaitForChild("Worlds"):WaitForChild("Hub"):WaitForChild("DungeonTemple"):WaitForChild("1"):WaitForChild("RaidRooms"):WaitForChild("Room4"):FindFirstChild("TeleportTarget")
            if teleportTarget then
                game.Players.LocalPlayer.Character:MoveTo(teleportTarget.Position)
            end
        end

        wait(1)
    end
end

local function autostoryToggle()
    local storylevel = storylevels[selectionStory]
    local difficulty = difficulties[selectionDifficulty]

    if selectionStory and selectionDifficulty then
        getgenv()[selectionStory] = not getgenv()[selectionStory]
        handlestory(selectionStory, storylevel, difficulty)
    end
end

warn('[TEMPEST HUB] Checking Functions')
wait(1)

local Tabs = {
    Main = Window:AddTab('Main'),
}

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Player')

LeftGroupBox:AddSlider('Walkspeed', {
    Text = 'Walkspeed',
    Default = 16,
    Min = 16,
    Max = 100,
    Rounding = 1,
    Compact = false,
    Callback = function(Value)
        SetWalkSpeed(Value)
    end
})

local Tabs = {
    Farm = Window:AddTab('Farm'),
}

local LeftGroupBox = Tabs.Farm:AddLeftGroupbox('Spirit')

LeftGroupBox:AddToggle('Catch Spirit', {
    Text = 'Catch Spirit',
    Default = false,
    Tooltip = 'Catch Spirit',
    Callback = function(Value)
        getgenv().autocatch = Value
        autocatch()
    end
})

local RightGroupBox = Tabs.Farm:AddRightGroupbox('Raid')

-- Adicione dropdown para selecionar a história
local storyDropdown = RightGroupBox:AddDropdown('Select Raid', {
    Values = {
        'DBZ RAID', 'One Piece Raid', 'MHA Raid', 'Naruto Raid', 'Jojo Raid', 'Demon Slayer Raid', 'Jujutsu Raid'
    },
    Default = 1,
    Multi = false,
    Text = 'Select Raid',
    Callback = function(Value)
        selectionStory = Value
    end
})

-- Add dropdown to select the difficulty
local difficultyDropdown = RightGroupBox:AddDropdown('Select Difficulty', {
    Values = {'Easy', 'Medium', 'Hard'},
    Default = 1,
    Multi = false,
    Text = 'Select Difficulty',
    Callback = function(Value)
        selectionDifficulty = Value
    end
})

RightGroupBox:AddToggle('Auto Enter Raid', {
    Text = 'Auto Enter Raid',
    Default = false,
    Tooltip = 'Auto Enter Raid',
    Callback = function(value)
        getgenv()["AutoEnterRaid"] = value
        if value == true then
            autostoryToggle() -- Start handling the raid immediately when the toggle is enabled
        end
    end
})

RightGroupBox:AddToggle('Auto Raid', {
    Text = 'Auto Raid',
    Default = false,
    Tooltip = 'Auto Raid',
    Callback = function(Value)
        getgenv().autoraid = Value
        autoraid()
    end
})

RightGroupBox:AddToggle('Auto Collect Chest', {
    Text = 'Auto Collect Chest',
    Default = false,
    Tooltip = 'Auto Collect Chest',
    Callback = function(Value)
        getgenv().autocollectchest = Value
        autocollectchest()
    end
})

local Tabs = {
    Farm = Window:AddTab('Roll'),
}

local LeftGroupBox = Tabs.Farm:AddLeftGroupbox('Roll Unit (Load The World First)')

LeftGroupBox:AddToggle('DBZ Egg', {
    Text = 'DBZ Egg',
    Default = false,
    Tooltip = 'DBZ Egg',
    Callback = function(Value)
        getgenv().DBZroll = Value
        DBZroll()
    end
})

LeftGroupBox:AddToggle('One Piece Egg', {
    Text = 'One Piece Egg',
    Default = false,
    Tooltip = 'One Piece Egg',
    Callback = function(Value)
        getgenv().OProll = Value
        OProll()
    end
})

LeftGroupBox:AddToggle('MHA Egg', {
    Text = 'MHA Egg',
    Default = false,
    Tooltip = 'MHA Egg',
    Callback = function(Value)
        getgenv().mharoll = Value
        mharoll()
    end
})

LeftGroupBox:AddToggle('Naruto Egg', {
    Text = 'Naruto Egg',
    Default = false,
    Tooltip = 'Naruto Egg',
    Callback = function(Value)
        getgenv().narutoroll = Value
        narutoroll()
    end
})

LeftGroupBox:AddToggle('Jojo Egg', {
    Text = 'Jojo Egg',
    Default = false,
    Tooltip = 'Jojo Egg',
    Callback = function(Value)
        getgenv().Jojoroll = Value
        Jojoroll()
    end
})

LeftGroupBox:AddToggle('Demon Slayer Egg', {
    Text = 'Demon Slayer Egg',
    Default = false,
    Tooltip = 'Demon Slayer Egg',
    Callback = function(Value)
        getgenv().Knyroll = Value
        Knyroll()
    end
})

LeftGroupBox:AddToggle('Jujutsu Egg', {
    Text = 'Jujutsu Egg',
    Default = false,
    Tooltip = 'Jujutsu Egg',
    Callback = function(Value)
        getgenv().jjkroll = Value
        jjkroll()
    end
})

local Tabs = {
    Farm = Window:AddTab('Teleport'),
}

local LeftGroupBox = Tabs.Farm:AddLeftGroupbox('World')

local MyButton = LeftGroupBox:AddButton({
    Text = 'Teleport To Hub',
    Func = function()
        getgenv().tptohub = Value
        tptohub()
    end,
    DoubleClick = false,
})

local MyButton = LeftGroupBox:AddButton({
    Text = 'Teleport To DBZ',
    Func = function()
        getgenv().tptodbz = Value
        tptodbz()
    end,
    DoubleClick = false,
})

local MyButton = LeftGroupBox:AddButton({
    Text = 'Teleport To One Piece',
    Func = function()
        getgenv().tptoop = Value
        tptoop()
    end,
    DoubleClick = false,
})

local MyButton = LeftGroupBox:AddButton({
    Text = 'Teleport To MHA',
    Func = function()
        getgenv().tptomha = Value
        tptomha()
    end,
    DoubleClick = false,
})

local MyButton = LeftGroupBox:AddButton({
    Text = 'Teleport To Naruto',
    Func = function()
        getgenv().tptonaruto = Value
        tptonaruto()
    end,
    DoubleClick = false,
})

local MyButton = LeftGroupBox:AddButton({
    Text = 'Teleport To Jojo',
    Func = function()
        getgenv().tptojojo = Value
        tptojojo()
    end,
    DoubleClick = false,
})

local MyButton = LeftGroupBox:AddButton({
    Text = 'Teleport To Kimetsu',
    Func = function()
        getgenv().tptodemon = Value
        tptodemon()
    end,
    DoubleClick = false,
})

local RightGroupBox = Tabs.Farm:AddRightGroupbox('Others')

local MyButton = RightGroupBox:AddButton({
    Text = 'Teleport To Raid',
    Func = function()
        getgenv().tptoraid = Value
        tptoraid()
    end,
    DoubleClick = false,
})

local MyButton = RightGroupBox:AddButton({
    Text = 'Teleport To Rerolls',
    Func = function()
        getgenv().tptorerolls = Value
        tptorerolls()
    end,
    DoubleClick = false,
})

local MyButton = RightGroupBox:AddButton({
    Text = 'Teleport To Tower',
    Func = function()
        getgenv().tptotower = Value
        tptotower()
    end,
    DoubleClick = false,
})

local MyButton = RightGroupBox:AddButton({
    Text = 'Teleport To Machine',
    Func = function()
        getgenv().tptomachine = Value
        tptomachine()
    end,
    DoubleClick = false,
})

local MyButton = RightGroupBox:AddButton({
    Text = 'Teleport To Cosmic',
    Func = function()
        getgenv().tptocosmic = Value
        tptocosmic()
    end,
    DoubleClick = false,
})

local FrameTimer = tick()
local FrameCounter = 0
local FPS = 60

local WatermarkConnection
WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(function()
    FrameCounter = FrameCounter + 1

    if (tick() - FrameTimer) >= 1 then
        FPS = FrameCounter
        FrameTimer = tick()
        FrameCounter = 0
    end

    Library:SetWatermark(('Tempest Hub | %s fps | %s ms'):format(
        math.floor(FPS),
        math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
    ))
end)

local TabsUI = {
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

Library:OnUnload(function()
    WatermarkConnection:Disconnect()
    print('Unloaded!')
    Library.Unloaded = true
end)

-- UI Settings
local MenuGroup = TabsUI['UI Settings']:AddLeftGroupbox('Menu')


MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })

-- Define a tabela 'Options'
Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

ThemeManager:SetFolder('Tempest Hub')
SaveManager:SetFolder('Tempest Hub/Anime Champions Simulator')

SaveManager:BuildConfigSection(TabsUI['UI Settings'])

ThemeManager:ApplyToTab(TabsUI['UI Settings'])

SaveManager:LoadAutoloadConfig()

for i,v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
    v:Disable()
end
warn('[TEMPEST HUB] Loaded')
